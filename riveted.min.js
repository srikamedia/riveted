/*!
 * @preserve
 * riveted.js | v0.6.2
 * Copyright (c) 2016 Rob Flaherty (@robflaherty)
 * Licensed under the MIT license
 */
!(function (root, factory) {
	'function' == typeof define && define.amd
		? define([], factory)
		: 'object' == typeof module && module.exports
		? (module.exports = factory())
		: (root.riveted = factory());
})(this, function () {
	var riveted;
	return (function () {
		var started = !1,
			stopped = !1,
			turnedOff = !1,
			clockTime = 0,
			startTime = new Date(),
			clockTimer = null,
			idleTimer = null,
			sendEvent,
			sendUserTiming,
			reportInterval,
			idleTimeout,
			nonInteraction,
			universalGA,
			classicGA,
			universalSendCommand,
			googleTagManager,
			gtagFunc = !1,
			gaGlobal;
		function init(options) {
			(options = options || {}),
				(reportInterval = parseInt(options.reportInterval, 10) || 5),
				(idleTimeout = parseInt(options.idleTimeout, 10) || 30),
				(gaGlobal = options.gaGlobal || 'ga'),
				'function' == typeof window[gaGlobal] && (universalGA = !0),
				'undefined' != typeof _gaq &&
					'function' == typeof _gaq.push &&
					(classicGA = !0),
				'undefined' != typeof dataLayer &&
					'function' == typeof dataLayer.push &&
					(googleTagManager = !0),
				'function' == typeof gtag && (gtagFunc = !0),
				(universalSendCommand =
					'gaTracker' in options && 'string' == typeof options.gaTracker
						? options.gaTracker + '.send'
						: 'send'),
				'function' == typeof options.eventHandler &&
					(sendEvent = options.eventHandler),
				'function' == typeof options.userTimingHandler &&
					(sendUserTiming = options.userTimingHandler),
				(nonInteraction =
					!('nonInteraction' in options) ||
					(!1 !== options.nonInteraction &&
						'false' !== options.nonInteraction)),
				addListener(document, 'keydown', trigger),
				addListener(document, 'click', trigger),
				addListener(window, 'mousemove', throttle(trigger, 500)),
				addListener(window, 'scroll', throttle(trigger, 500)),
				addListener(document, 'visibilitychange', visibilityChange),
				addListener(document, 'webkitvisibilitychange', visibilityChange);
		}
		function throttle(func, wait) {
			var context,
				args,
				result,
				timeout = null,
				previous = 0,
				later = function () {
					(previous = new Date()),
						(timeout = null),
						(result = func.apply(context, args));
				};
			return function () {
				var now = new Date();
				previous || (previous = now);
				var remaining = wait - (now - previous);
				return (
					(context = this),
					(args = arguments),
					remaining <= 0
						? (clearTimeout(timeout),
						  (timeout = null),
						  (previous = now),
						  (result = func.apply(context, args)))
						: timeout || (timeout = setTimeout(later, remaining)),
					result
				);
			};
		}
		function addListener(element, eventName, handler) {
			element.addEventListener
				? element.addEventListener(eventName, handler, !1)
				: element.attachEvent
				? element.attachEvent('on' + eventName, handler)
				: (element['on' + eventName] = handler);
		}
		function setIdle() {
			clearTimeout(idleTimer), stopClock();
		}
		function visibilityChange() {
			(document.hidden || document.webkitHidden) && setIdle();
		}
		function clock() {
			(clockTime += 1) > 0 &&
				clockTime % reportInterval == 0 &&
				sendEvent(clockTime);
		}
		function stopClock() {
			(stopped = !0), clearInterval(clockTimer);
		}
		function turnOff() {
			setIdle(), (turnedOff = !0);
		}
		function turnOn() {
			turnedOff = !1;
		}
		function restartClock() {
			(stopped = !1),
				clearInterval(clockTimer),
				(clockTimer = setInterval(clock, 1e3));
		}
		function startRiveted() {
			var currentTime = new Date(),
				diff;
			(started = !0),
				sendUserTiming(currentTime - startTime),
				(clockTimer = setInterval(clock, 1e3));
		}
		function resetRiveted() {
			(startTime = new Date()),
				(clockTime = 0),
				(started = !1),
				(stopped = !1),
				clearInterval(clockTimer),
				clearTimeout(idleTimer);
		}
		function trigger() {
			turnedOff ||
				(started || startRiveted(),
				stopped && restartClock(),
				clearTimeout(idleTimer),
				(idleTimer = setTimeout(setIdle, 1e3 * idleTimeout + 100)));
		}
		return (
			(sendUserTiming = function (timingValue) {
				googleTagManager
					? gtagFunc
						? gtag('event', 'RivetedTiming', {
								event_category: 'Riveted',
								event_label: 'First Interaction',
								value: timingValue,
						  })
						: dataLayer.push({
								event: 'RivetedTiming',
								eventCategory: 'Riveted',
								timingVar: 'First Interaction',
								timingValue: timingValue,
						  })
					: (universalGA &&
							window[gaGlobal](
								universalSendCommand,
								'timing',
								'Riveted',
								'First Interaction',
								timingValue,
							),
					  classicGA &&
							_gaq.push([
								'_trackTiming',
								'Riveted',
								'First Interaction',
								timingValue,
								null,
								100,
							]));
			}),
			(sendEvent = function (time) {
				googleTagManager
					? gtagFunc
						? gtag('event', 'Riveted', {
								event_category: 'Riveted',
								event_action: 'Time Spent',
								event_label: time,
								value: reportInterval,
								non_interaction: nonInteraction,
						  })
						: dataLayer.push({
								event: 'Riveted',
								eventCategory: 'Riveted',
								eventAction: 'Time Spent',
								eventLabel: time,
								eventValue: reportInterval,
								eventNonInteraction: nonInteraction,
						  })
					: (universalGA &&
							window[gaGlobal](
								universalSendCommand,
								'event',
								'Riveted',
								'Time Spent',
								time.toString(),
								reportInterval,
								{ nonInteraction: nonInteraction },
							),
					  classicGA &&
							_gaq.push([
								'_trackEvent',
								'Riveted',
								'Time Spent',
								time.toString(),
								reportInterval,
								nonInteraction,
							]));
			}),
			{
				init: init,
				trigger: trigger,
				setIdle: setIdle,
				on: turnOn,
				off: turnOff,
				reset: resetRiveted,
			}
		);
	})();
});
